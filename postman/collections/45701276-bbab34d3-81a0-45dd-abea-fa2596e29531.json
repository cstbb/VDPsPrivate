{
	"info": {
		"_postman_id": "45701276-bbab34d3-81a0-45dd-abea-fa2596e29531",
		"name": "Sistema de Gest√£o Hospitalar VidaPlus",
		"description": "## Projeto\n\nO VidaPlus √© um sistema moderno de gest√£o hospitalar desenvolvido para centralizar e otimizar todas as opera√ß√µes relacionadas √† sa√∫de. Nossa solu√ß√£o integra hospitais, cl√≠nicas, laborat√≥rios e equipes de home care em uma √∫nica plataforma.\n\n### ‚ú® Principais Funcionalidades\n\n- üë§ **Gest√£o de Pacientes**\n    \n    - Cadastro completo\n        \n    - Hist√≥rico m√©dico\n        \n    - Agendamento de consultas\n        \n    - Prontu√°rios eletr√¥nicos\n        \n- üë®‚Äç‚öïÔ∏è **Gest√£o de Profissionais**\n    \n    - Cadastro de m√©dicos\n        \n    - Controle de agendas\n        \n    - Prescri√ß√µes digitais\n        \n    - Hist√≥rico de atendimentos\n        \n- üè• **Administra√ß√£o Hospitalar**\n    \n    - Controle de leitos\n        \n    - Gest√£o de suprimentos\n        \n    - Relat√≥rios financeiros\n        \n    - Indicadores de desempenho\n        \n- üíª **Telemedicina**\n    \n    - Consultas online\n        \n    - Prescri√ß√µes digitais\n        \n    - Agendamento remoto\n        \n    - Prontu√°rios eletr√¥nicos\n        \n\n## üöÄ Come√ßando\n\n### Pr√©-requisitos\n\n- Python 3.8 ou superior\n    \n- pip (gerenciador de pacotes Python)\n    \n- Postman (para testes da API)\n    \n\n### üîß Instala√ß√£o\n\n1. Clone o reposit√≥rio\n    \n\n```\ngit clone https://github.com/seu-usuario/vidaplus.git\ncd vidaplus\n\n ```\n\n1. Crie e ative o ambiente virtual\n    \n\n```\n# Windows\npython -m venv venv\nvenv\\Scripts\\activate\n# Linux/Mac\npython -m venv venv\nsource venv/bin/activate\n\n ```\n\n1. Instale as depend√™ncias\n    \n\n```\npip install -r requirements.txt\n\n ```\n\n1. Configure as vari√°veis de ambiente Crie um arquivo `.env` na raiz do projeto:\n    \n\n```\nDATABASE_URL=sqlite:///vidaplus.db\nJWT_SECRET_KEY=sua-chave-secreta-aqui\nFLASK_ENV=development\nFLASK_APP=app.py\n\n ```\n\n1. Execute o sistema\n    \n\n```\npython app.py\n\n ```\n\n## üì° Endpoints da API\n\n### üîê Autentica√ß√£o\n\n- `POST /api/auth/registro` - Registro de novo usu√°rio\n    \n- `POST /api/auth/login` - Login de usu√°rio\n    \n\n### üë§ Pacientes\n\n- `POST /api/pacientes` - Cadastro de novo paciente\n    \n- `GET /api/pacientes/{id}` - Consulta de paciente\n    \n- `PUT /api/pacientes/{id}` - Atualiza√ß√£o de dados\n    \n\n### üìÖ Consultas\n\n- `POST /api/consultas` - Agendamento de consulta\n    \n- `GET /api/consultas/{id}` - Detalhes da consulta\n    \n- `PUT /api/consultas/{id}` - Atualiza√ß√£o de status\n    \n\n### üìã Prontu√°rios\n\n- `POST /api/prontuarios` - Cria√ß√£o de prontu√°rio\n    \n- `GET /api/prontuarios/{id}` - Consulta de prontu√°rio\n    \n- `PUT /api/prontuarios/{id}` - Atualiza√ß√£o de prontu√°rio\n    \n\n## üõ°Ô∏è Seguran√ßa\n\n- üîí Autentica√ß√£o via JWT\n    \n- üîê Senhas criptografadas com bcrypt\n    \n- üë• Controle de acesso por perfil\n    \n- üìú Conformidade com LGPD\n    \n- üîç Registro de auditoria\n    \n\n## üìä Banco de Dados\n\nO sistema utiliza SQLite como banco de dados principal, com suporte para migra√ß√£o para PostgreSQL em ambiente de produ√ß√£o.\n\n## üß™ Testes\n\nPara executar os testes:\n\n```\npython -m pytest\n\n ```\n\n## üìù Documenta√ß√£o\n\nA documenta√ß√£o completa do sistema est√° dispon√≠vel em:\n\n- [Documenta√ß√£o T√©cnica](https://github.com/maydoc/VidaPlus/blob/main/DOCUMENTACAO.md)\n    \n- [Guia de API](https://github.com/maydoc/VidaPlus/blob/main/API.md)\n    \n- [Manual do Usu√°rio](https://github.com/maydoc/VidaPlus/blob/main/MANUAL.md)\n    \n\n## ü§ù Contribuindo\n\n1. Fa√ßa o fork do projeto\n    \n2. Crie uma branch para sua feature (`git checkout -b feature/AmazingFeature`)\n    \n3. Commit suas mudan√ßas (`git commit -m 'Add some AmazingFeature'`)\n    \n4. Push para a branch (`git push origin feature/AmazingFeature`)\n    \n5. Abra um Pull Request\n    \n\n## üìû Suporte\n\nPara suporte, envie um email para [suporte@vidaplus.com](https://mailto:suporte@vidaplus.com) ou abra uma issue no GitHub.\n\n## üôè Agradecimentos\n\n- [Flask](https://flask.palletsprojects.com/)\n    \n- [SQLAlchemy](https://www.sqlalchemy.org/)\n    \n- [JWT](https://jwt.io/)\n    \n- [Postman](https://www.postman.com/)\n    \n\n---\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "InicioSite",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc7e0f25-b0ba-4470-961f-92e70e27c3d9",
						"exec": [
							"import javax.swing.*;\r",
							"import java.awt.*;\r",
							"import java.awt.event.*;\r",
							"\r",
							"public class HospitalLogin extends JFrame {\r",
							"\r",
							"    // Componentes da interface\r",
							"    private JTextField usuarioField;\r",
							"    private JPasswordField senhaField;\r",
							"    private JButton loginButton, sairButton;\r",
							"\r",
							"    public HospitalLogin() {\r",
							"        setTitle(\"Sistema Hospitalar - Login\");\r",
							"        setSize(400, 250);\r",
							"        setDefaultCloseOperation(EXIT_ON_CLOSE);\r",
							"        setLocationRelativeTo(null); // Centraliza a janela\r",
							"        setLayout(new BorderLayout());\r",
							"\r",
							"        // Painel principal\r",
							"        JPanel painel = new JPanel(new GridLayout(3, 2, 10, 10));\r",
							"        painel.setBorder(BorderFactory.createEmptyBorder(30, 30, 10, 30));\r",
							"\r",
							"        // Labels e campos\r",
							"        painel.add(new JLabel(\"Usu√°rio:\"));\r",
							"        usuarioField = new JTextField();\r",
							"        painel.add(usuarioField);\r",
							"\r",
							"        painel.add(new JLabel(\"Senha:\"));\r",
							"        senhaField = new JPasswordField();\r",
							"        painel.add(senhaField);\r",
							"\r",
							"        loginButton = new JButton(\"Entrar\");\r",
							"        sairButton = new JButton(\"Sair\");\r",
							"        painel.add(loginButton);\r",
							"        painel.add(sairButton);\r",
							"\r",
							"        add(painel, BorderLayout.CENTER);\r",
							"\r",
							"        // A√ß√µes dos bot√µes\r",
							"        loginButton.addActionListener(e -> autenticar());\r",
							"        sairButton.addActionListener(e -> System.exit(0));\r",
							"    }\r",
							"\r",
							"    private void autenticar() {\r",
							"        String usuario = usuarioField.getText();\r",
							"        String senha = new String(senhaField.getPassword());\r",
							"\r",
							"        // Exemplo simples de valida√ß√£o (substituir com valida√ß√£o real)\r",
							"        if (usuario.equals(\"admin\") && senha.equals(\"1234\")) {\r",
							"            JOptionPane.showMessageDialog(this, \"Login bem-sucedido!\");\r",
							"         \r",
							"        } else {\r",
							"            JOptionPane.showMessageDialog(this, \"Usu√°rio ou senha incorretos.\", \"Erro\", JOptionPane.ERROR_MESSAGE);\r",
							"        }\r",
							"    }\r",
							"\r",
							"    public static void main(String[] args) {\r",
							"        SwingUtilities.invokeLater(() -> {\r",
							"            new HospitalLogin().setVisible(true);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2bbcc97c-e820-41ff-8d4d-ce481a96e0d2",
						"exec": [
							"import javax.swing.*;\r",
							"import java.awt.*;\r",
							"import java.awt.event.*;\r",
							"\r",
							"public class HospitalLogin extends JFrame {\r",
							"\r",
							"    // Componentes da interface\r",
							"    private JTextField usuarioField;\r",
							"    private JPasswordField senhaField;\r",
							"    private JButton loginButton, sairButton;\r",
							"\r",
							"    public HospitalLogin() {\r",
							"        setTitle(\"Sistema Hospitalar - Login\");\r",
							"        setSize(400, 250);\r",
							"        setDefaultCloseOperation(EXIT_ON_CLOSE);\r",
							"        setLocationRelativeTo(null); // Centraliza a janela\r",
							"        setLayout(new BorderLayout());\r",
							"\r",
							"        // Painel principal\r",
							"        JPanel painel = new JPanel(new GridLayout(3, 2, 10, 10));\r",
							"        painel.setBorder(BorderFactory.createEmptyBorder(30, 30, 10, 30));\r",
							"\r",
							"        // Labels e campos\r",
							"        painel.add(new JLabel(\"Usu√°rio:\"));\r",
							"        usuarioField = new JTextField();\r",
							"        painel.add(usuarioField);\r",
							"\r",
							"        painel.add(new JLabel(\"Senha:\"));\r",
							"        senhaField = new JPasswordField();\r",
							"        painel.add(senhaField);\r",
							"\r",
							"        loginButton = new JButton(\"Entrar\");\r",
							"        sairButton = new JButton(\"Sair\");\r",
							"        painel.add(loginButton);\r",
							"        painel.add(sairButton);\r",
							"\r",
							"        add(painel, BorderLayout.CENTER);\r",
							"\r",
							"        // A√ß√µes dos bot√µes\r",
							"        loginButton.addActionListener(e -> autenticar());\r",
							"        sairButton.addActionListener(e -> System.exit(0));\r",
							"    }\r",
							"\r",
							"    private void autenticar() {\r",
							"        String usuario = usuarioField.getText();\r",
							"        String senha = new String(senhaField.getPassword());\r",
							"\r",
							"        // Exemplo simples de valida√ß√£o (substituir com valida√ß√£o real)\r",
							"        if (usuario.equals(\"admin\") && senha.equals(\"1234\")) {\r",
							"            JOptionPane.showMessageDialog(this, \"Login bem-sucedido!\");\r",
							"         \r",
							"        } else {\r",
							"            JOptionPane.showMessageDialog(this, \"Usu√°rio ou senha incorretos.\", \"Erro\", JOptionPane.ERROR_MESSAGE);\r",
							"        }\r",
							"    }\r",
							"\r",
							"    public static void main(String[] args) {\r",
							"        SwingUtilities.invokeLater(() -> {\r",
							"            new HospitalLogin().setVisible(true);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "45701276-c07a26e7-e083-4988-8c5a-2e3fea865ec0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Usu√°rios",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a94fc13-cea2-4a77-b622-cd2abe215a68",
						"exec": [
							"// request POST /users/signup\r",
							"// body JSON\r",
							"{\r",
							"  \"name\": \"Cambriel\",\r",
							"  \"email\": \"cambriel@gmail.com\",\r",
							"  \"password\": \"camb0522\"\r",
							"}\r",
							"\r",
							"// response\r",
							"// status 201 CREATED\r",
							"{\r",
							"  token: \"um token jwt\"\r",
							"}\r",
							"\r",
							"public class TesteUsuarios {\r",
							"    public static void main(String[] args) {\r",
							"        Usuario admin = new Usuario(\"Camila\", \"admin\", \"4462521\", TipoUsuario.ADMINISTRADOR);\r",
							"        Usuario medico = new Usuario(\"Dra. Fabia\", \"fabia\", \"senha\", TipoUsuario.MEDICO);\r",
							"\r",
							"        System.out.println(admin);\r",
							"        System.out.println(medico);\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "45701276-164ebaed-7342-43b1-a608-489f47a3ce16",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Perfis",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "44901d0f-482d-4e53-b72f-73e992524395",
						"exec": [
							"public enum TipoUsuario {\r",
							"    ADMINISTRADOR,\r",
							"    MEDICO,\r",
							"    ENFERMEIRO,\r",
							"    RECEPCIONISTA,\r",
							"    PACIENTE\r",
							"}\r",
							"\r",
							"\r",
							"public class Usuario {\r",
							"    private String nome;\r",
							"    private String login;\r",
							"    private String senha;\r",
							"    private TipoUsuario tipo;\r",
							"\r",
							"    public Usuario(String nome, String login, String senha, TipoUsuario tipo) {\r",
							"        this.nome = nome;\r",
							"        this.login = login;\r",
							"        this.senha = senha;\r",
							"        this.tipo = tipo;\r",
							"    }\r",
							"\r",
							"    // Getters e Setters\r",
							"    public String getNome() {\r",
							"        return nome;\r",
							"    }\r",
							"\r",
							"    public String getLogin() {\r",
							"        return login;\r",
							"    }\r",
							"\r",
							"    public String getSenha() {\r",
							"        return senha;\r",
							"    }\r",
							"\r",
							"    public TipoUsuario getTipo() {\r",
							"        return tipo;\r",
							"    }\r",
							"\r",
							"    public void setSenha(String senha) {\r",
							"        this.senha = senha;\r",
							"    }\r",
							"\r",
							"    public void setTipo(TipoUsuario tipo) {\r",
							"        this.tipo = tipo;\r",
							"    }\r",
							"\r",
							"    @Override\r",
							"    public String toString() {\r",
							"        return \"Usu√°rio: \" + nome + \" | Tipo: \" + tipo;\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b3b32794-8e19-4929-87f0-6eafc1067ffc",
						"exec": [
							"public enum TipoUsuario {\r",
							"    ADMINISTRADOR,\r",
							"    MEDICO,\r",
							"    ENFERMEIRO,\r",
							"    RECEPCIONISTA,\r",
							"    PACIENTE\r",
							"}\r",
							"\r",
							"\r",
							"public class Usuario {\r",
							"    private String nome;\r",
							"    private String login;\r",
							"    private String senha;\r",
							"    private TipoUsuario tipo;\r",
							"\r",
							"    public Usuario(String nome, String login, String senha, TipoUsuario tipo) {\r",
							"        this.nome = nome;\r",
							"        this.login = login;\r",
							"        this.senha = senha;\r",
							"        this.tipo = tipo;\r",
							"    }\r",
							"\r",
							"    // Getters e Setters\r",
							"    public String getNome() {\r",
							"        return nome;\r",
							"    }\r",
							"\r",
							"    public String getLogin() {\r",
							"        return login;\r",
							"    }\r",
							"\r",
							"    public String getSenha() {\r",
							"        return senha;\r",
							"    }\r",
							"\r",
							"    public TipoUsuario getTipo() {\r",
							"        return tipo;\r",
							"    }\r",
							"\r",
							"    public void setSenha(String senha) {\r",
							"        this.senha = senha;\r",
							"    }\r",
							"\r",
							"    public void setTipo(TipoUsuario tipo) {\r",
							"        this.tipo = tipo;\r",
							"    }\r",
							"\r",
							"    @Override\r",
							"    public String toString() {\r",
							"        return \"Usu√°rio: \" + nome + \" | Tipo: \" + tipo;\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "45701276-c8579637-d7df-47fd-833e-97a7c7d7ef90",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Cadastro_Pacientes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "53b93f8d-62e7-4c2c-b1d8-a80eae2cbb1a",
						"exec": [
							"import javax.swing.*;\r",
							"import java.awt.*;\r",
							"import java.awt.event.*;\r",
							"\r",
							"public class CadastroPaciente extends JFrame {\r",
							"\r",
							"    private JTextField nomeField, cpfField, dataNascimentoField, enderecoField, telefoneField;\r",
							"    private JComboBox<String> sexoComboBox;\r",
							"    private JButton salvarButton, limparButton;\r",
							"\r",
							"    public CadastroPaciente() {\r",
							"        setTitle(\"Cadastro de Paciente\");\r",
							"        setSize(450, 350);\r",
							"        setDefaultCloseOperation(DISPOSE_ON_CLOSE); \r",
							"        setLocationRelativeTo(null);\r",
							"        setLayout(new BorderLayout());\r",
							"\r",
							"        JPanel painel = new JPanel(new GridLayout(7, 2, 10, 10));\r",
							"        painel.setBorder(BorderFactory.createEmptyBorder(20, 30, 20, 30));\r",
							"\r",
							"        painel.add(new JLabel(\"Nome:\"));\r",
							"        nomeField = new JTextField();\r",
							"        painel.add(nomeField);\r",
							"\r",
							"        painel.add(new JLabel(\"CPF:\"));\r",
							"        cpfField = new JTextField();\r",
							"        painel.add(cpfField);\r",
							"\r",
							"        painel.add(new JLabel(\"Data de Nascimento (dd/mm/aaaa):\"));\r",
							"        dataNascimentoField = new JTextField();\r",
							"        painel.add(dataNascimentoField);\r",
							"\r",
							"        painel.add(new JLabel(\"Sexo:\"));\r",
							"        sexoComboBox = new JComboBox<>(new String[]{\"Masculino\", \"Feminino\", \"Outro\"});\r",
							"        painel.add(sexoComboBox);\r",
							"\r",
							"        painel.add(new JLabel(\"Endere√ßo:\"));\r",
							"        enderecoField = new JTextField();\r",
							"        painel.add(enderecoField);\r",
							"\r",
							"        painel.add(new JLabel(\"Telefone:\"));\r",
							"        telefoneField = new JTextField();\r",
							"        painel.add(telefoneField);\r",
							"\r",
							"        salvarButton = new JButton(\"Salvar\");\r",
							"        limparButton = new JButton(\"Limpar\");\r",
							"\r",
							"        painel.add(salvarButton);\r",
							"        painel.add(limparButton);\r",
							"\r",
							"        add(painel, BorderLayout.CENTER);\r",
							"\r",
							"        salvarButton.addActionListener(e -> salvarPaciente());\r",
							"        limparButton.addActionListener(e -> limparCampos());\r",
							"    }\r",
							"\r",
							"    private void salvarPaciente() {\r",
							"        String nome = nomeField.getText();\r",
							"        String cpf = cpfField.getText();\r",
							"        String dataNasc = dataNascimentoField.getText();\r",
							"        String sexo = (String) sexoComboBox.getSelectedItem();\r",
							"        String endereco = enderecoField.getText();\r",
							"        String telefone = telefoneField.getText();\r",
							"\r",
							"        \r",
							"        if (nome.isEmpty() || cpf.isEmpty()) {\r",
							"            JOptionPane.showMessageDialog(this, \"Por favor, preencha os campos obrigat√≥rios (Nome e CPF).\", \"Erro\", JOptionPane.ERROR_MESSAGE);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        JOptionPane.showMessageDialog(this, \"Paciente cadastrado com sucesso:\\n\" +\r",
							"                \"Nome: \" + nome + \"\\nCPF: \" + cpf + \"\\nSexo: \" + sexo);\r",
							"        \r",
							"        limparCampos();\r",
							"    }\r",
							"\r",
							"    private void limparCampos() {\r",
							"        nomeField.setText(\"\");\r",
							"        cpfField.setText(\"\");\r",
							"        dataNascimentoField.setText(\"\");\r",
							"        enderecoField.setText(\"\");\r",
							"        telefoneField.setText(\"\");\r",
							"        sexoComboBox.setSelectedIndex(0);\r",
							"    }\r",
							"\r",
							"\r",
							"    public static void main(String[] args) {\r",
							"        SwingUtilities.invokeLater(() -> {\r",
							"            new CadastroPaciente().setVisible(true);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e7322408-fcf7-414e-bdd7-05c494708fb1",
						"exec": [
							"import javax.swing.*;\r",
							"import java.awt.*;\r",
							"import java.awt.event.*;\r",
							"\r",
							"public class CadastroPaciente extends JFrame {\r",
							"\r",
							"    private JTextField nomeField, cpfField, dataNascimentoField, enderecoField, telefoneField;\r",
							"    private JComboBox<String> sexoComboBox;\r",
							"    private JButton salvarButton, limparButton;\r",
							"\r",
							"    public CadastroPaciente() {\r",
							"        setTitle(\"Cadastro de Paciente\");\r",
							"        setSize(450, 350);\r",
							"        setDefaultCloseOperation(DISPOSE_ON_CLOSE); \r",
							"        setLocationRelativeTo(null);\r",
							"        setLayout(new BorderLayout());\r",
							"\r",
							"        JPanel painel = new JPanel(new GridLayout(7, 2, 10, 10));\r",
							"        painel.setBorder(BorderFactory.createEmptyBorder(20, 30, 20, 30));\r",
							"\r",
							"        painel.add(new JLabel(\"Nome:\"));\r",
							"        nomeField = new JTextField();\r",
							"        painel.add(nomeField);\r",
							"\r",
							"        painel.add(new JLabel(\"CPF:\"));\r",
							"        cpfField = new JTextField();\r",
							"        painel.add(cpfField);\r",
							"\r",
							"        painel.add(new JLabel(\"Data de Nascimento (dd/mm/aaaa):\"));\r",
							"        dataNascimentoField = new JTextField();\r",
							"        painel.add(dataNascimentoField);\r",
							"\r",
							"        painel.add(new JLabel(\"Sexo:\"));\r",
							"        sexoComboBox = new JComboBox<>(new String[]{\"Masculino\", \"Feminino\", \"Outro\"});\r",
							"        painel.add(sexoComboBox);\r",
							"\r",
							"        painel.add(new JLabel(\"Endere√ßo:\"));\r",
							"        enderecoField = new JTextField();\r",
							"        painel.add(enderecoField);\r",
							"\r",
							"        painel.add(new JLabel(\"Telefone:\"));\r",
							"        telefoneField = new JTextField();\r",
							"        painel.add(telefoneField);\r",
							"\r",
							"        salvarButton = new JButton(\"Salvar\");\r",
							"        limparButton = new JButton(\"Limpar\");\r",
							"\r",
							"        painel.add(salvarButton);\r",
							"        painel.add(limparButton);\r",
							"\r",
							"        add(painel, BorderLayout.CENTER);\r",
							"\r",
							"        salvarButton.addActionListener(e -> salvarPaciente());\r",
							"        limparButton.addActionListener(e -> limparCampos());\r",
							"    }\r",
							"\r",
							"    private void salvarPaciente() {\r",
							"        String nome = nomeField.getText();\r",
							"        String cpf = cpfField.getText();\r",
							"        String dataNasc = dataNascimentoField.getText();\r",
							"        String sexo = (String) sexoComboBox.getSelectedItem();\r",
							"        String endereco = enderecoField.getText();\r",
							"        String telefone = telefoneField.getText();\r",
							"\r",
							"        \r",
							"        if (nome.isEmpty() || cpf.isEmpty()) {\r",
							"            JOptionPane.showMessageDialog(this, \"Por favor, preencha os campos obrigat√≥rios (Nome e CPF).\", \"Erro\", JOptionPane.ERROR_MESSAGE);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        JOptionPane.showMessageDialog(this, \"Paciente cadastrado com sucesso:\\n\" +\r",
							"                \"Nome: \" + nome + \"\\nCPF: \" + cpf + \"\\nSexo: \" + sexo);\r",
							"        \r",
							"        limparCampos();\r",
							"    }\r",
							"\r",
							"    private void limparCampos() {\r",
							"        nomeField.setText(\"\");\r",
							"        cpfField.setText(\"\");\r",
							"        dataNascimentoField.setText(\"\");\r",
							"        enderecoField.setText(\"\");\r",
							"        telefoneField.setText(\"\");\r",
							"        sexoComboBox.setSelectedIndex(0);\r",
							"    }\r",
							"\r",
							"\r",
							"    public static void main(String[] args) {\r",
							"        SwingUtilities.invokeLater(() -> {\r",
							"            new CadastroPaciente().setVisible(true);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "45701276-63dfb7cd-254a-4650-a674-9943e654e5ea",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "AgendarConsulta",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8cf49aa1-61f3-43e4-a619-55bd1493c3fa",
						"exec": [
							"import java.time.LocalDateTime;\r",
							"\r",
							"public class Consulta {\r",
							"    private String pacienteNome;\r",
							"    private String medicoNome;\r",
							"    private LocalDateTime dataHora;\r",
							"\r",
							"    public Consulta(String pacienteNome, String medicoNome, LocalDateTime dataHora) {\r",
							"        this.pacienteNome = pacienteNome;\r",
							"        this.medicoNome = medicoNome;\r",
							"        this.dataHora = dataHora;\r",
							"    }\r",
							"\r",
							"    public String getPacienteNome() {\r",
							"        return pacienteNome;\r",
							"    }\r",
							"\r",
							"    public String getMedicoNome() {\r",
							"        return medicoNome;\r",
							"    }\r",
							"\r",
							"    public LocalDateTime getDataHora() {\r",
							"        return dataHora;\r",
							"    }\r",
							"\r",
							"    @Override\r",
							"    public String toString() {\r",
							"        return dataHora + \" - \" + pacienteNome + \" (Dr(a). \" + medicoNome + \")\";\r",
							"    }\r",
							"}\r",
							"\r",
							"import javax.swing.*;\r",
							"import java.awt.*;\r",
							"import java.awt.event.*;\r",
							"import java.time.LocalDateTime;\r",
							"import java.time.format.DateTimeFormatter;\r",
							"import java.util.*;\r",
							"\r",
							"public class AgendaMedica extends JFrame {\r",
							"\r",
							"    private DefaultListModel<Consulta> modeloConsultas;\r",
							"    private JList<Consulta> listaConsultas;\r",
							"    private JTextField pacienteField, medicoField, dataHoraField;\r",
							"    private JButton adicionarButton, removerButton;\r",
							"\r",
							"    public AgendaMedica() {\r",
							"        setTitle(\"Agenda M√©dica\");\r",
							"        setSize(600, 400);\r",
							"        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\r",
							"        setLocationRelativeTo(null);\r",
							"        setLayout(new BorderLayout());\r",
							"\r",
							"        modeloConsultas = new DefaultListModel<>();\r",
							"        listaConsultas = new JList<>(modeloConsultas);\r",
							"        JScrollPane scrollPane = new JScrollPane(listaConsultas);\r",
							"\r",
							"        JPanel painelForm = new JPanel(new GridLayout(4, 2, 10, 10));\r",
							"        painelForm.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));\r",
							"\r",
							"        pacienteField = new JTextField();\r",
							"        medicoField = new JTextField();\r",
							"        dataHoraField = new JTextField(); \r",
							"\r",
							"        painelForm.add(new JLabel(\"Paciente:\"));\r",
							"        painelForm.add(pacienteField);\r",
							"        painelForm.add(new JLabel(\"M√©dico:\"));\r",
							"        painelForm.add(medicoField);\r",
							"        painelForm.add(new JLabel(\"Data e Hora (dd/MM/yyyy HH:mm):\"));\r",
							"        painelForm.add(dataHoraField);\r",
							"\r",
							"        adicionarButton = new JButton(\"Agendar\");\r",
							"        removerButton = new JButton(\"Cancelar\");\r",
							"        painelForm.add(adicionarButton);\r",
							"        painelForm.add(removerButton);\r",
							"\r",
							"        add(scrollPane, BorderLayout.CENTER);\r",
							"        add(painelForm, BorderLayout.SOUTH);\r",
							"\r",
							"        adicionarButton.addActionListener(e -> agendarConsulta());\r",
							"        removerButton.addActionListener(e -> cancelarConsulta());\r",
							"    }\r",
							"\r",
							"    private void agendarConsulta() {\r",
							"        String paciente = pacienteField.getText();\r",
							"        String medico = medicoField.getText();\r",
							"        String dataHoraTexto = dataHoraField.getText();\r",
							"\r",
							"        try {\r",
							"            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\r",
							"            LocalDateTime dataHora = LocalDateTime.parse(dataHoraTexto, formatter);\r",
							"\r",
							"            Consulta novaConsulta = new Consulta(paciente, medico, dataHora);\r",
							"            modeloConsultas.addElement(novaConsulta);\r",
							"\r",
							"            JOptionPane.showMessageDialog(this, \"Consulta agendada com sucesso!\");\r",
							"            limparCampos();\r",
							"\r",
							"        } catch (Exception e) {\r",
							"            JOptionPane.showMessageDialog(this, \"Formato de data inv√°lido. Use dd/MM/yyyy HH:mm\", \"Erro\", JOptionPane.ERROR_MESSAGE);\r",
							"        }\r",
							"    }\r",
							"\r",
							"    private void cancelarConsulta() {\r",
							"        Consulta selecionada = listaConsultas.getSelectedValue();\r",
							"        if (selecionada != null) {\r",
							"            modeloConsultas.removeElement(selecionada);\r",
							"            JOptionPane.showMessageDialog(this, \"Consulta cancelada.\");\r",
							"        } else {\r",
							"            JOptionPane.showMessageDialog(this, \"Selecione uma consulta para cancelar.\");\r",
							"        }\r",
							"    }\r",
							"\r",
							"    private void limparCampos() {\r",
							"        pacienteField.setText(\"\");\r",
							"        medicoField.setText(\"\");\r",
							"        dataHoraField.setText(\"\");\r",
							"    }\r",
							"\r",
							"    public static void main(String[] args) {\r",
							"        SwingUtilities.invokeLater(() -> {\r",
							"            new AgendaMedica().setVisible(true);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6fb7b16c-c8ed-4edd-9e61-d027e5693ba6",
						"exec": [
							"import java.time.LocalDateTime;\r",
							"\r",
							"public class Consulta {\r",
							"    private String pacienteNome;\r",
							"    private String medicoNome;\r",
							"    private LocalDateTime dataHora;\r",
							"\r",
							"    public Consulta(String pacienteNome, String medicoNome, LocalDateTime dataHora) {\r",
							"        this.pacienteNome = pacienteNome;\r",
							"        this.medicoNome = medicoNome;\r",
							"        this.dataHora = dataHora;\r",
							"    }\r",
							"\r",
							"    public String getPacienteNome() {\r",
							"        return pacienteNome;\r",
							"    }\r",
							"\r",
							"    public String getMedicoNome() {\r",
							"        return medicoNome;\r",
							"    }\r",
							"\r",
							"    public LocalDateTime getDataHora() {\r",
							"        return dataHora;\r",
							"    }\r",
							"\r",
							"    @Override\r",
							"    public String toString() {\r",
							"        return dataHora + \" - \" + pacienteNome + \" (Dr(a). \" + medicoNome + \")\";\r",
							"    }\r",
							"}\r",
							"\r",
							"import javax.swing.*;\r",
							"import java.awt.*;\r",
							"import java.awt.event.*;\r",
							"import java.time.LocalDateTime;\r",
							"import java.time.format.DateTimeFormatter;\r",
							"import java.util.*;\r",
							"\r",
							"public class AgendaMedica extends JFrame {\r",
							"\r",
							"    private DefaultListModel<Consulta> modeloConsultas;\r",
							"    private JList<Consulta> listaConsultas;\r",
							"    private JTextField pacienteField, medicoField, dataHoraField;\r",
							"    private JButton adicionarButton, removerButton;\r",
							"\r",
							"    public AgendaMedica() {\r",
							"        setTitle(\"Agenda M√©dica\");\r",
							"        setSize(600, 400);\r",
							"        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\r",
							"        setLocationRelativeTo(null);\r",
							"        setLayout(new BorderLayout());\r",
							"\r",
							"        modeloConsultas = new DefaultListModel<>();\r",
							"        listaConsultas = new JList<>(modeloConsultas);\r",
							"        JScrollPane scrollPane = new JScrollPane(listaConsultas);\r",
							"\r",
							"        JPanel painelForm = new JPanel(new GridLayout(4, 2, 10, 10));\r",
							"        painelForm.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));\r",
							"\r",
							"        pacienteField = new JTextField();\r",
							"        medicoField = new JTextField();\r",
							"        dataHoraField = new JTextField(); \r",
							"\r",
							"        painelForm.add(new JLabel(\"Paciente:\"));\r",
							"        painelForm.add(pacienteField);\r",
							"        painelForm.add(new JLabel(\"M√©dico:\"));\r",
							"        painelForm.add(medicoField);\r",
							"        painelForm.add(new JLabel(\"Data e Hora (dd/MM/yyyy HH:mm):\"));\r",
							"        painelForm.add(dataHoraField);\r",
							"\r",
							"        adicionarButton = new JButton(\"Agendar\");\r",
							"        removerButton = new JButton(\"Cancelar\");\r",
							"        painelForm.add(adicionarButton);\r",
							"        painelForm.add(removerButton);\r",
							"\r",
							"        add(scrollPane, BorderLayout.CENTER);\r",
							"        add(painelForm, BorderLayout.SOUTH);\r",
							"\r",
							"        adicionarButton.addActionListener(e -> agendarConsulta());\r",
							"        removerButton.addActionListener(e -> cancelarConsulta());\r",
							"    }\r",
							"\r",
							"    private void agendarConsulta() {\r",
							"        String paciente = pacienteField.getText();\r",
							"        String medico = medicoField.getText();\r",
							"        String dataHoraTexto = dataHoraField.getText();\r",
							"\r",
							"        try {\r",
							"            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\r",
							"            LocalDateTime dataHora = LocalDateTime.parse(dataHoraTexto, formatter);\r",
							"\r",
							"            Consulta novaConsulta = new Consulta(paciente, medico, dataHora);\r",
							"            modeloConsultas.addElement(novaConsulta);\r",
							"\r",
							"            JOptionPane.showMessageDialog(this, \"Consulta agendada com sucesso!\");\r",
							"            limparCampos();\r",
							"\r",
							"        } catch (Exception e) {\r",
							"            JOptionPane.showMessageDialog(this, \"Formato de data inv√°lido. Use dd/MM/yyyy HH:mm\", \"Erro\", JOptionPane.ERROR_MESSAGE);\r",
							"        }\r",
							"    }\r",
							"\r",
							"    private void cancelarConsulta() {\r",
							"        Consulta selecionada = listaConsultas.getSelectedValue();\r",
							"        if (selecionada != null) {\r",
							"            modeloConsultas.removeElement(selecionada);\r",
							"            JOptionPane.showMessageDialog(this, \"Consulta cancelada.\");\r",
							"        } else {\r",
							"            JOptionPane.showMessageDialog(this, \"Selecione uma consulta para cancelar.\");\r",
							"        }\r",
							"    }\r",
							"\r",
							"    private void limparCampos() {\r",
							"        pacienteField.setText(\"\");\r",
							"        medicoField.setText(\"\");\r",
							"        dataHoraField.setText(\"\");\r",
							"    }\r",
							"\r",
							"    public static void main(String[] args) {\r",
							"        SwingUtilities.invokeLater(() -> {\r",
							"            new AgendaMedica().setVisible(true);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "45701276-16aaba3f-83fd-4b09-92fe-babeb07897cf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Seguran√ßa",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9eb6a9a5-39ce-4b5a-975f-d7b037b6922c",
						"exec": [
							"public enum TipoUsuario {\r",
							"    ADMINISTRADOR,\r",
							"    MEDICO,\r",
							"    ENFERMEIRO,\r",
							"    RECEPCIONISTA,\r",
							"    PACIENTE\r",
							"}\r",
							"\r",
							"public class Usuario {\r",
							"    private String nome;\r",
							"    private String login;\r",
							"    private String senha;\r",
							"    private TipoUsuario tipo;\r",
							"\r",
							"    public Usuario(String nome, String login, String senha, TipoUsuario tipo) {\r",
							"        this.nome = nome;\r",
							"        this.login = login;\r",
							"        this.senha = senha;\r",
							"        this.tipo = tipo;\r",
							"    }\r",
							"\r",
							"    public String getNome() {\r",
							"        return nome;\r",
							"    }\r",
							"\r",
							"    public String getLogin() {\r",
							"        return login;\r",
							"    }\r",
							"\r",
							"    public String getSenha() {\r",
							"        return senha;\r",
							"    }\r",
							"\r",
							"    public TipoUsuario getTipo() {\r",
							"        return tipo;\r",
							"    }\r",
							"}\r",
							"\r",
							"import javax.swing.*;\r",
							"import java.awt.*;\r",
							"import java.awt.event.*;\r",
							"import java.util.*;\r",
							"\r",
							"public class HospitalLogin extends JFrame {\r",
							"\r",
							"    private JTextField usuarioField;\r",
							"    private JPasswordField senhaField;\r",
							"    private JButton loginButton, sairButton;\r",
							"\r",
							"    private List<Usuario> usuarios;\r",
							"\r",
							"    public HospitalLogin() {\r",
							"        setTitle(\"Sistema Hospitalar - Login\");\r",
							"        setSize(400, 250);\r",
							"        setDefaultCloseOperation(EXIT_ON_CLOSE);\r",
							"        setLocationRelativeTo(null);\r",
							"        setLayout(new BorderLayout());\r",
							"\r",
							"        initUsuarios(); \r",
							"\r",
							"        JPanel painel = new JPanel(new GridLayout(3, 2, 10, 10));\r",
							"        painel.setBorder(BorderFactory.createEmptyBorder(30, 30, 10, 30));\r",
							"\r",
							"        painel.add(new JLabel(\"Usu√°rio:\"));\r",
							"        usuarioField = new JTextField();\r",
							"        painel.add(usuarioField);\r",
							"\r",
							"        painel.add(new JLabel(\"Senha:\"));\r",
							"        senhaField = new JPasswordField();\r",
							"        painel.add(senhaField);\r",
							"\r",
							"        loginButton = new JButton(\"Entrar\");\r",
							"        sairButton = new JButton(\"Sair\");\r",
							"        painel.add(loginButton);\r",
							"        painel.add(sairButton);\r",
							"\r",
							"        add(painel, BorderLayout.CENTER);\r",
							"\r",
							"        loginButton.addActionListener(e -> autenticar());\r",
							"        sairButton.addActionListener(e -> System.exit(0));\r",
							"    }\r",
							"\r",
							"    private void initUsuarios() {\r",
							"        usuarios = new ArrayList<>();\r",
							"        usuarios.add(new Usuario(\"Administrador\", \"admin\", \"4462521\", TipoUsuario.ADMINISTRADOR));\r",
							"        usuarios.add(new Usuario(\"Dra. Camila\", \"camila\", \"med4462521\", TipoUsuario.MEDICO));\r",
							"        usuarios.add(new Usuario(\"Enf. Julia\", \"julia\", \"enf462\", TipoUsuario.ENFERMEIRO));\r",
							"        usuarios.add(new Usuario(\"Recep√ß√£o\", \"recep\", \"7890\", TipoUsuario.RECEPCIONISTA));\r",
							"        usuarios.add(new Usuario(\"Paciente Jo√£o\", \"joao\", \"pac001\", TipoUsuario.PACIENTE));\r",
							"    }\r",
							"\r",
							"    private void autenticar() {\r",
							"        String login = usuarioField.getText();\r",
							"        String senha = new String(senhaField.getPassword());\r",
							"\r",
							"        for (Usuario u : usuarios) {\r",
							"            if (u.getLogin().equals(login) && u.getSenha().equals(senha)) {\r",
							"                JOptionPane.showMessageDialog(this, \r",
							"                    \"Bem-vindo, \" + u.getNome() + \"!\\nTipo de usu√°rio: \" + u.getTipo(),\r",
							"                    \"Login bem-sucedido\", JOptionPane.INFORMATION_MESSAGE);\r",
							"                \r",
							"            \r",
							"                abrirTelaUsuario(u);\r",
							"                return;\r",
							"            }\r",
							"        }\r",
							"\r",
							"        JOptionPane.showMessageDialog(this, \"Usu√°rio ou senha incorretos.\", \"Erro\", JOptionPane.ERROR_MESSAGE);\r",
							"    }\r",
							"\r",
							"    private void abrirTelaUsuario(Usuario usuario) {\r",
							"        // Exemplo simples de a√ß√£o por tipo\r",
							"        switch (usuario.getTipo()) {\r",
							"            case ADMINISTRADOR:\r",
							"                System.out.println(\"Abrindo painel do administrador...\");\r",
							"                break;\r",
							"            case MEDICO:\r",
							"                System.out.println(\"Abrindo painel do m√©dico...\");\r",
							"                break;\r",
							"            case ENFERMEIRO:\r",
							"                System.out.println(\"Abrindo painel do enfermeiro...\");\r",
							"                break;\r",
							"            case RECEPCIONISTA:\r",
							"                System.out.println(\"Abrindo painel da recep√ß√£o...\");\r",
							"                break;\r",
							"            case PACIENTE:\r",
							"                System.out.println(\"Abrindo painel do paciente...\");\r",
							"                break;\r",
							"        }\r",
							"\r",
							"        \r",
							"    }\r",
							"\r",
							"    public static void main(String[] args) {\r",
							"        SwingUtilities.invokeLater(() -> {\r",
							"            new HospitalLogin().setVisible(true);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "aab6b559-4410-4ef3-a771-aee71e6642bf",
						"exec": [
							"public enum TipoUsuario {\r",
							"    ADMINISTRADOR,\r",
							"    MEDICO,\r",
							"    ENFERMEIRO,\r",
							"    RECEPCIONISTA,\r",
							"    PACIENTE\r",
							"}\r",
							"\r",
							"public class Usuario {\r",
							"    private String nome;\r",
							"    private String login;\r",
							"    private String senha;\r",
							"    private TipoUsuario tipo;\r",
							"\r",
							"    public Usuario(String nome, String login, String senha, TipoUsuario tipo) {\r",
							"        this.nome = nome;\r",
							"        this.login = login;\r",
							"        this.senha = senha;\r",
							"        this.tipo = tipo;\r",
							"    }\r",
							"\r",
							"    public String getNome() {\r",
							"        return nome;\r",
							"    }\r",
							"\r",
							"    public String getLogin() {\r",
							"        return login;\r",
							"    }\r",
							"\r",
							"    public String getSenha() {\r",
							"        return senha;\r",
							"    }\r",
							"\r",
							"    public TipoUsuario getTipo() {\r",
							"        return tipo;\r",
							"    }\r",
							"}\r",
							"\r",
							"import javax.swing.*;\r",
							"import java.awt.*;\r",
							"import java.awt.event.*;\r",
							"import java.util.*;\r",
							"\r",
							"public class HospitalLogin extends JFrame {\r",
							"\r",
							"    private JTextField usuarioField;\r",
							"    private JPasswordField senhaField;\r",
							"    private JButton loginButton, sairButton;\r",
							"\r",
							"    private List<Usuario> usuarios;\r",
							"\r",
							"    public HospitalLogin() {\r",
							"        setTitle(\"Sistema Hospitalar - Login\");\r",
							"        setSize(400, 250);\r",
							"        setDefaultCloseOperation(EXIT_ON_CLOSE);\r",
							"        setLocationRelativeTo(null);\r",
							"        setLayout(new BorderLayout());\r",
							"\r",
							"        initUsuarios(); \r",
							"\r",
							"        JPanel painel = new JPanel(new GridLayout(3, 2, 10, 10));\r",
							"        painel.setBorder(BorderFactory.createEmptyBorder(30, 30, 10, 30));\r",
							"\r",
							"        painel.add(new JLabel(\"Usu√°rio:\"));\r",
							"        usuarioField = new JTextField();\r",
							"        painel.add(usuarioField);\r",
							"\r",
							"        painel.add(new JLabel(\"Senha:\"));\r",
							"        senhaField = new JPasswordField();\r",
							"        painel.add(senhaField);\r",
							"\r",
							"        loginButton = new JButton(\"Entrar\");\r",
							"        sairButton = new JButton(\"Sair\");\r",
							"        painel.add(loginButton);\r",
							"        painel.add(sairButton);\r",
							"\r",
							"        add(painel, BorderLayout.CENTER);\r",
							"\r",
							"        loginButton.addActionListener(e -> autenticar());\r",
							"        sairButton.addActionListener(e -> System.exit(0));\r",
							"    }\r",
							"\r",
							"    private void initUsuarios() {\r",
							"        usuarios = new ArrayList<>();\r",
							"        usuarios.add(new Usuario(\"Administrador\", \"admin\", \"4462521\", TipoUsuario.ADMINISTRADOR));\r",
							"        usuarios.add(new Usuario(\"Dra. Camila\", \"camila\", \"med4462521\", TipoUsuario.MEDICO));\r",
							"        usuarios.add(new Usuario(\"Enf. Julia\", \"julia\", \"enf462\", TipoUsuario.ENFERMEIRO));\r",
							"        usuarios.add(new Usuario(\"Recep√ß√£o\", \"recep\", \"7890\", TipoUsuario.RECEPCIONISTA));\r",
							"        usuarios.add(new Usuario(\"Paciente Jo√£o\", \"joao\", \"pac001\", TipoUsuario.PACIENTE));\r",
							"    }\r",
							"\r",
							"    private void autenticar() {\r",
							"        String login = usuarioField.getText();\r",
							"        String senha = new String(senhaField.getPassword());\r",
							"\r",
							"        for (Usuario u : usuarios) {\r",
							"            if (u.getLogin().equals(login) && u.getSenha().equals(senha)) {\r",
							"                JOptionPane.showMessageDialog(this, \r",
							"                    \"Bem-vindo, \" + u.getNome() + \"!\\nTipo de usu√°rio: \" + u.getTipo(),\r",
							"                    \"Login bem-sucedido\", JOptionPane.INFORMATION_MESSAGE);\r",
							"                \r",
							"            \r",
							"                abrirTelaUsuario(u);\r",
							"                return;\r",
							"            }\r",
							"        }\r",
							"\r",
							"        JOptionPane.showMessageDialog(this, \"Usu√°rio ou senha incorretos.\", \"Erro\", JOptionPane.ERROR_MESSAGE);\r",
							"    }\r",
							"\r",
							"    private void abrirTelaUsuario(Usuario usuario) {\r",
							"        // Exemplo simples de a√ß√£o por tipo\r",
							"        switch (usuario.getTipo()) {\r",
							"            case ADMINISTRADOR:\r",
							"                System.out.println(\"Abrindo painel do administrador...\");\r",
							"                break;\r",
							"            case MEDICO:\r",
							"                System.out.println(\"Abrindo painel do m√©dico...\");\r",
							"                break;\r",
							"            case ENFERMEIRO:\r",
							"                System.out.println(\"Abrindo painel do enfermeiro...\");\r",
							"                break;\r",
							"            case RECEPCIONISTA:\r",
							"                System.out.println(\"Abrindo painel da recep√ß√£o...\");\r",
							"                break;\r",
							"            case PACIENTE:\r",
							"                System.out.println(\"Abrindo painel do paciente...\");\r",
							"                break;\r",
							"        }\r",
							"\r",
							"        \r",
							"    }\r",
							"\r",
							"    public static void main(String[] args) {\r",
							"        SwingUtilities.invokeLater(() -> {\r",
							"            new HospitalLogin().setVisible(true);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "45701276-a3d5bd00-73e8-405e-ad13-8cddb340f264",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	]
}