{
	"info": {
		"_postman_id": "45701276-bbab34d3-81a0-45dd-abea-fa2596e29531",
		"name": "Sistema de Gest√£o Hospitalar VidaPlus",
		"description": "## Projeto\n\nO VidaPlus √© um sistema moderno de gest√£o hospitalar desenvolvido para centralizar e otimizar todas as opera√ß√µes relacionadas √† sa√∫de. Nossa solu√ß√£o integra hospitais, cl√≠nicas, laborat√≥rios e equipes de home care em uma √∫nica plataforma.\n\n### ‚ú® Principais Funcionalidades\n\n- üë§ **Gest√£o de Pacientes**\n    \n    - Cadastro completo\n        \n    - Hist√≥rico m√©dico\n        \n    - Agendamento de consultas\n        \n    - Prontu√°rios eletr√¥nicos\n        \n- üë®‚Äç‚öïÔ∏è **Gest√£o de Profissionais**\n    \n    - Cadastro de m√©dicos\n        \n    - Controle de agendas\n        \n    - Prescri√ß√µes digitais\n        \n    - Hist√≥rico de atendimentos\n        \n- üè• **Administra√ß√£o Hospitalar**\n    \n    - Controle de leitos\n        \n    - Gest√£o de suprimentos\n        \n    - Relat√≥rios financeiros\n        \n    - Indicadores de desempenho\n        \n- üíª **Telemedicina**\n    \n    - Consultas online\n        \n    - Prescri√ß√µes digitais\n        \n    - Agendamento remoto\n        \n    - Prontu√°rios eletr√¥nicos\n        \n\n## üöÄ Come√ßando\n\n### Pr√©-requisitos\n\n- Python 3.8 ou superior\n    \n- pip (gerenciador de pacotes Python)\n    \n- Postman (para testes da API)\n    \n\n### üîß Instala√ß√£o\n\n1. Clone o reposit√≥rio\n    \n\n```\ngit clone https://github.com/seu-usuario/vidaplus.git\ncd vidaplus\n\n ```\n\n1. Crie e ative o ambiente virtual\n    \n\n```\n# Windows\npython -m venv venv\nvenv\\Scripts\\activate\n# Linux/Mac\npython -m venv venv\nsource venv/bin/activate\n\n ```\n\n1. Instale as depend√™ncias\n    \n\n```\npip install -r requirements.txt\n\n ```\n\n1. Configure as vari√°veis de ambiente Crie um arquivo `.env` na raiz do projeto:\n    \n\n```\nDATABASE_URL=sqlite:///vidaplus.db\nJWT_SECRET_KEY=sua-chave-secreta-aqui\nFLASK_ENV=development\nFLASK_APP=app.py\n\n ```\n\n1. Execute o sistema\n    \n\n```\npython app.py\n\n ```\n\n## üì° Endpoints da API\n\n### üîê Autentica√ß√£o\n\n- `POST /api/auth/registro` - Registro de novo usu√°rio\n    \n- `POST /api/auth/login` - Login de usu√°rio\n    \n\n### üë§ Pacientes\n\n- `POST /api/pacientes` - Cadastro de novo paciente\n    \n- `GET /api/pacientes/{id}` - Consulta de paciente\n    \n- `PUT /api/pacientes/{id}` - Atualiza√ß√£o de dados\n    \n\n### üìÖ Consultas\n\n- `POST /api/consultas` - Agendamento de consulta\n    \n- `GET /api/consultas/{id}` - Detalhes da consulta\n    \n- `PUT /api/consultas/{id}` - Atualiza√ß√£o de status\n    \n\n### üìã Prontu√°rios\n\n- `POST /api/prontuarios` - Cria√ß√£o de prontu√°rio\n    \n- `GET /api/prontuarios/{id}` - Consulta de prontu√°rio\n    \n- `PUT /api/prontuarios/{id}` - Atualiza√ß√£o de prontu√°rio\n    \n\n## üõ°Ô∏è Seguran√ßa\n\n- üîí Autentica√ß√£o via JWT\n    \n- üîê Senhas criptografadas com bcrypt\n    \n- üë• Controle de acesso por perfil\n    \n- üìú Conformidade com LGPD\n    \n- üîç Registro de auditoria\n    \n\n## üìä Banco de Dados\n\nO sistema utiliza SQLite como banco de dados principal, com suporte para migra√ß√£o para PostgreSQL em ambiente de produ√ß√£o.\n\n## üß™ Testes\n\nPara executar os testes:\n\n```\npython -m pytest\n\n ```\n\n## üìù Documenta√ß√£o\n\nA documenta√ß√£o completa do sistema est√° dispon√≠vel em:\n\n- [Documenta√ß√£o T√©cnica](https://github.com/maydoc/VidaPlus/blob/main/DOCUMENTACAO.md)\n    \n- [Guia de API](https://github.com/maydoc/VidaPlus/blob/main/API.md)\n    \n- [Manual do Usu√°rio](https://github.com/maydoc/VidaPlus/blob/main/MANUAL.md)\n    \n\n## ü§ù Contribuindo\n\n1. Fa√ßa o fork do projeto\n    \n2. Crie uma branch para sua feature (`git checkout -b feature/AmazingFeature`)\n    \n3. Commit suas mudan√ßas (`git commit -m 'Add some AmazingFeature'`)\n    \n4. Push para a branch (`git push origin feature/AmazingFeature`)\n    \n5. Abra um Pull Request\n    \n\n## üìû Suporte\n\nPara suporte, envie um email para [suporte@vidaplus.com](https://mailto:suporte@vidaplus.com) ou abra uma issue no GitHub.\n\n## üôè Agradecimentos\n\n- [Flask](https://flask.palletsprojects.com/)\n    \n- [SQLAlchemy](https://www.sqlalchemy.org/)\n    \n- [JWT](https://jwt.io/)\n    \n- [Postman](https://www.postman.com/)\n    \n\n---\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Usu√°rios",
			"item": [
				{
					"name": "New Request",
					"id": "45701276-8d795cc8-5f1b-4426-9357-1ba455f00f22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"id": "45701276-1a3fda19-3f21-4793-84aa-564728a57937",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b4b927e1-351a-486b-a60a-bd4046ab77a9",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// request POST /users/signup\r",
							"// body JSON\r",
							"{\r",
							"  \"name\": \"Cambriel\",\r",
							"  \"email\": \"cambriel@gmail.com\",\r",
							"  \"password\": \"camb0522\"\r",
							"}\r",
							"\r",
							"// response\r",
							"// status 201 CREATED\r",
							"{\r",
							" "
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dfc764ea-084c-4d8d-b960-7f4ae9060325",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// request POST /users/signup\r",
							"// body JSON\r",
							"{\r",
							"  \"name\": \"Cambriel\",\r",
							"  \"email\": \"cambriel@gmail.com\",\r",
							"  \"password\": \"camb0522\"\r",
							"}\r",
							"\r",
							"// response\r",
							"// status 201 CREATED\r",
							"{\r",
							"  token: \"um token jwt\"\r",
							"}\r",
							"\r",
							"public class TesteUsuarios {\r",
							"    public static void main(String[] args) {\r",
							"        Usuario admin = new Usuario(\"Camila\", \"admin\", \"4462521\", TipoUsuario.ADMINISTRADOR);\r",
							"        Usuario medico = new Usuario(\"Dra. Fabia\", \"fabia\", \"senha\", TipoUsuario.MEDICO);\r",
							"\r",
							"        System.out.println(admin);\r",
							"        System.out.println(medico);\r",
							"    }\r",
							"}\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "CadastroPaciente",
			"item": [],
			"id": "45701276-00beff87-f8af-46be-996c-ec078dd744d0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3878e817-32ec-4d97-8fca-ba3fbf63b781",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f4367ea0-e392-4b4c-92d4-8307a473e539",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// request GET /patient\r",
							"// headers.authorization = \"token jwt\"\r",
							"\r",
							"// response\r",
							"// status 200 OK\r",
							"[\r",
							"    {\r",
							"        \"id\": \"paciente1\",\r",
							"        \"creator\":\r",
							"        {\r",
							"            \"id\": \"paciente1\",\r",
							"            \"name\": \"Lucia\"\r",
							"        }\r",
							"        \"name\": \"Lucia Green\",\r",
							"        \"age\": 23,\r",
							"        \"email\":\"luciagg22@gmail.com\",\r",
							"        \"telefon\":119953326543,\r",
							"        \"address\": \"123 AV Nacoes, Brooklin - SP / 123\",\r",
							"        \"createdAt\": \"2025-06-20T12:11:58:000Z\"\r",
							"        \"updatedAt\": \"2025-06-20T12:11:58:000Z\"\r",
							"    },\r",
							"    {\r",
							"        \"id\": \"uma uuid v4\",\r",
							"        \"creator\":\r",
							"        {\r",
							"            \"id\": \"uma uuid v4\",\r",
							"            \"name\": \"Fulano\"\r",
							"        }\r",
							"        \"name\": \"Emma Johnson\",\r",
							"        \"age\": 30,\r",
							"        \"email\":\"example@example.com\",\r",
							"        \"telefon\":12346,\r",
							"        \"address\": \"56 Oxford Road London United Kingdom zipCode SW1A 1AA\",\r",
							"        \"createdAt\": \"2025-01-20T12:11:47:000Z\"\r",
							"        \"updatedAt\": \"2025-01-20T12:11:47:000Z\"\r",
							"\r",
							"    }\r",
							"]"
						]
					}
				}
			]
		},
		{
			"name": "Perfis",
			"item": [],
			"id": "45701276-2f31c1d7-efc3-4714-9c7a-75979709743f",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dffcbcd9-8253-4055-be5b-997379876a59",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6e125ce8-73c6-4264-b9e7-881a31b1c700",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"public enum TipoUsuario {\r",
							"    ADMINISTRADOR,\r",
							"    MEDICO,\r",
							"    ENFERMEIRO,\r",
							"    RECEPCIONISTA,\r",
							"    PACIENTE\r",
							"}\r",
							"\r",
							"\r",
							"public class Usuario {\r",
							"    private String nome;\r",
							"    private String login;\r",
							"    private String senha;\r",
							"    private TipoUsuario tipo;\r",
							"\r",
							"    public Usuario(String nome, String login, String senha, TipoUsuario tipo) {\r",
							"        this.nome = nome;\r",
							"        this.login = login;\r",
							"        this.senha = senha;\r",
							"        this.tipo = tipo;\r",
							"    }\r",
							"\r",
							"    // Getters e Setters\r",
							"    public String getNome() {\r",
							"        return nome;\r",
							"    }\r",
							"\r",
							"    public String getLogin() {\r",
							"        return login;\r",
							"    }\r",
							"\r",
							"    public String getSenha() {\r",
							"        return senha;\r",
							"    }\r",
							"\r",
							"    public TipoUsuario getTipo() {\r",
							"        return tipo;\r",
							"    }\r",
							"\r",
							"    public void setSenha(String senha) {\r",
							"        this.senha = senha;\r",
							"    }\r",
							"\r",
							"    public void setTipo(TipoUsuario tipo) {\r",
							"        this.tipo = tipo;\r",
							"    }\r",
							"\r",
							"    @Override\r",
							"    public String toString() {\r",
							"        return \"Usu√°rio: \" + nome + \" | Tipo: \" + tipo;\r",
							"    }\r",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "InicioSite",
			"item": [],
			"id": "45701276-4278ef56-6542-4385-893d-9a12f69d7417",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f08b28f9-c29b-4daf-91d0-f44f19cc49df",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "51b9d387-8da7-4c0c-8a44-c23337c0ca87",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"import javax.swing.*;\r",
							"import java.awt.*;\r",
							"import java.awt.event.*;\r",
							"\r",
							"public class HospitalLogin extends JFrame {\r",
							"\r",
							"    // Componentes da interface\r",
							"    private JTextField usuarioField;\r",
							"    private JPasswordField senhaField;\r",
							"    private JButton loginButton, sairButton;\r",
							"\r",
							"    public HospitalLogin() {\r",
							"        setTitle(\"Sistema Hospitalar - Login\");\r",
							"        setSize(400, 250);\r",
							"        setDefaultCloseOperation(EXIT_ON_CLOSE);\r",
							"        setLocationRelativeTo(null); // Centraliza a janela\r",
							"        setLayout(new BorderLayout());\r",
							"\r",
							"        // Painel principal\r",
							"        JPanel painel = new JPanel(new GridLayout(3, 2, 10, 10));\r",
							"        painel.setBorder(BorderFactory.createEmptyBorder(30, 30, 10, 30));\r",
							"\r",
							"        // Labels e campos\r",
							"        painel.add(new JLabel(\"Usu√°rio:\"));\r",
							"        usuarioField = new JTextField();\r",
							"        painel.add(usuarioField);\r",
							"\r",
							"        painel.add(new JLabel(\"Senha:\"));\r",
							"        senhaField = new JPasswordField();\r",
							"        painel.add(senhaField);\r",
							"\r",
							"        loginButton = new JButton(\"Entrar\");\r",
							"        sairButton = new JButton(\"Sair\");\r",
							"        painel.add(loginButton);\r",
							"        painel.add(sairButton);\r",
							"\r",
							"        add(painel, BorderLayout.CENTER);\r",
							"\r",
							"        // A√ß√µes dos bot√µes\r",
							"        loginButton.addActionListener(e -> autenticar());\r",
							"        sairButton.addActionListener(e -> System.exit(0));\r",
							"    }\r",
							"\r",
							"    private void autenticar() {\r",
							"        String usuario = usuarioField.getText();\r",
							"        String senha = new String(senhaField.getPassword());\r",
							"\r",
							"        // Exemplo simples de valida√ß√£o (substituir com valida√ß√£o real)\r",
							"        if (usuario.equals(\"admin\") && senha.equals(\"1234\")) {\r",
							"            JOptionPane.showMessageDialog(this, \"Login bem-sucedido!\");\r",
							"         \r",
							"        } else {\r",
							"            JOptionPane.showMessageDialog(this, \"Usu√°rio ou senha incorretos.\", \"Erro\", JOptionPane.ERROR_MESSAGE);\r",
							"        }\r",
							"    }\r",
							"\r",
							"    public static void main(String[] args) {\r",
							"        SwingUtilities.invokeLater(() -> {\r",
							"            new HospitalLogin().setVisible(true);\r",
							"        });\r",
							"    }\r",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Seguran√ßa",
			"item": [],
			"id": "45701276-5ea63df9-0542-4ed3-9ed7-ae6348c15aca"
		},
		{
			"name": "AgendaConsulta",
			"item": [],
			"id": "45701276-92650be0-4d8b-4065-ab08-9b9ec4a384cb"
		},
		{
			"name": "New Request",
			"id": "45701276-164ebaed-7342-43b1-a608-489f47a3ce16",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	]
}